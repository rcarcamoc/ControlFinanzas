package com.aranthalion.controlfinanzas

import android.app.Application
import android.util.Log
import dagger.hilt.android.HiltAndroidApp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import javax.inject.Inject
import com.aranthalion.controlfinanzas.domain.clasificacion.GestionarClasificacionAutomaticaUseCase
import com.aranthalion.controlfinanzas.domain.categoria.GestionarCategoriasUseCase
import com.aranthalion.controlfinanzas.data.repository.MovimientoRepository
import com.aranthalion.controlfinanzas.data.local.ConfiguracionPreferences

@HiltAndroidApp
class ControlFinanzasApp : Application() {
    
    @Inject
    lateinit var clasificacionUseCase: GestionarClasificacionAutomaticaUseCase
    
    @Inject
    lateinit var categoriasUseCase: GestionarCategoriasUseCase
    
    @Inject
    lateinit var movimientoRepository: MovimientoRepository
    
    @Inject
    lateinit var configuracionPreferences: ConfiguracionPreferences
    
    override fun onCreate() {
        super.onCreate()
        Log.d("ControlFinanzasApp", "üöÄ Iniciando aplicaci√≥n ControlFinanzas")
        
        // Inicializaci√≥n segura que NO borra datos del usuario
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // Verificar si es la primera ejecuci√≥n
                if (!configuracionPreferences.isFirstRun) {
                    Log.d("ControlFinanzasApp", "üìö Inicializando sistema de clasificaci√≥n autom√°tica...")
                    
                    // Solo cargar categor√≠as por defecto si no existen (NO sobrescribir)
                    Log.d("ControlFinanzasApp", "üìã Verificando categor√≠as por defecto...")
                    categoriasUseCase.insertDefaultCategorias()
                    
                    // SOLO cargar datos hist√≥ricos si es la primera vez y el usuario lo ha solicitado
                    // NO limpiar ni recargar autom√°ticamente
                    if (configuracionPreferences.historicalDataLoaded && !configuracionPreferences.obtenerDatosCargados()) {
                        Log.d("ControlFinanzasApp", "üìä Cargando datos hist√≥ricos del CSV (solo primera vez)...")
                        movimientoRepository.cargarDatosHistoricos()
                        configuracionPreferences.guardarDatosCargados(true)
                        Log.d("ControlFinanzasApp", "‚úÖ Datos hist√≥ricos cargados correctamente")
                    } else {
                        Log.d("ControlFinanzasApp", "‚ÑπÔ∏è Datos hist√≥ricos ya cargados o no solicitados - preservando datos del usuario")
                    }
                    
                    // Cargar sistema de clasificaci√≥n autom√°tica (solo patrones predefinidos, NO sobrescribir)
                    if (!configuracionPreferences.obtenerClasificacionCargada()) {
                        Log.d("ControlFinanzasApp", "ü§ñ Cargando patrones de clasificaci√≥n predefinidos...")
                        clasificacionUseCase.cargarDatosHistoricos()
                        configuracionPreferences.guardarClasificacionCargada(true)
                        Log.d("ControlFinanzasApp", "‚úÖ Sistema de clasificaci√≥n autom√°tica inicializado correctamente")
                    } else {
                        Log.d("ControlFinanzasApp", "‚ÑπÔ∏è Patrones de clasificaci√≥n ya cargados - preservando patrones del usuario")
                    }
                } else {
                    Log.d("ControlFinanzasApp", "üÜï Primera ejecuci√≥n detectada - esperando configuraci√≥n del usuario")
                }
                
            } catch (e: Exception) {
                // Log del error pero no fallar la aplicaci√≥n
                Log.e("ControlFinanzasApp", "‚ùå Error al inicializar sistema: ${e.message}")
                e.printStackTrace()
            }
        }
    }
} 