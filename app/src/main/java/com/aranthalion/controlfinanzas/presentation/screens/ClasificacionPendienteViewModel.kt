package com.aranthalion.controlfinanzas.presentation.screens

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.aranthalion.controlfinanzas.data.local.entity.MovimientoEntity
import com.aranthalion.controlfinanzas.data.repository.MovimientoRepository
import com.aranthalion.controlfinanzas.domain.clasificacion.GestionarClasificacionAutomaticaUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ClasificacionPendienteViewModel @Inject constructor(
    private val movimientoRepository: MovimientoRepository,
    private val clasificacionUseCase: GestionarClasificacionAutomaticaUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow<ClasificacionPendienteUiState>(ClasificacionPendienteUiState.Loading)
    val uiState: StateFlow<ClasificacionPendienteUiState> = _uiState.asStateFlow()

    init {
        cargarTransaccionesPendientes()
    }

    private fun cargarTransaccionesPendientes() {
        viewModelScope.launch {
            try {
                android.util.Log.d("ClasificacionVM", "üîÑ Cargando transacciones pendientes...")
                _uiState.value = ClasificacionPendienteUiState.Loading
                
                // Obtener todas las transacciones sin categor√≠a asignada
                val todasLasTransacciones = movimientoRepository.obtenerMovimientos()
                android.util.Log.d("ClasificacionVM", "üìä Total de transacciones obtenidas: ${todasLasTransacciones.size}")
                
                val transaccionesPendientes = todasLasTransacciones.filter { 
                    it.categoriaId == null || it.categoriaId == 0L 
                }
                android.util.Log.d("ClasificacionVM", "üìã Transacciones pendientes de clasificaci√≥n: ${transaccionesPendientes.size}")
                
                _uiState.value = ClasificacionPendienteUiState.Success(transaccionesPendientes)
                android.util.Log.d("ClasificacionVM", "‚úÖ Transacciones cargadas exitosamente")
            } catch (e: Exception) {
                android.util.Log.e("ClasificacionVM", "‚ùå Error al cargar transacciones: ${e.message}")
                e.printStackTrace()
                _uiState.value = ClasificacionPendienteUiState.Error(
                    "Error al cargar transacciones: ${e.message}"
                )
            }
        }
    }

    fun clasificarTransaccion(transaccion: MovimientoEntity, categoriaId: Long) {
        viewModelScope.launch {
            try {
                android.util.Log.d("ClasificacionVM", "üîÑ Iniciando clasificaci√≥n de transacci√≥n: ${transaccion.descripcion}")
                android.util.Log.d("ClasificacionVM", "üìã ID de transacci√≥n: ${transaccion.id}")
                android.util.Log.d("ClasificacionVM", "üè∑Ô∏è Categor√≠a seleccionada ID: $categoriaId")
                
                // Actualizar la transacci√≥n con la categor√≠a seleccionada
                val transaccionActualizada = transaccion.copy(categoriaId = categoriaId)
                android.util.Log.d("ClasificacionVM", "üìù Transacci√≥n actualizada: ${transaccionActualizada.categoriaId}")
                
                try {
                    movimientoRepository.actualizarMovimiento(transaccionActualizada)
                    android.util.Log.d("ClasificacionVM", "‚úÖ Transacci√≥n actualizada en la base de datos")
                } catch (e: Exception) {
                    android.util.Log.e("ClasificacionVM", "‚ùå Error al actualizar movimiento: ${e.message}")
                    throw e
                }
                
                // Aprender del patr√≥n para futuras clasificaciones
                try {
                    android.util.Log.d("ClasificacionVM", "üß† Aprendiendo patr√≥n: '${transaccion.descripcion}' -> $categoriaId")
                    clasificacionUseCase.aprenderPatron(transaccion.descripcion, categoriaId)
                    android.util.Log.d("ClasificacionVM", "‚úÖ Patr√≥n aprendido exitosamente")
                } catch (e: Exception) {
                    android.util.Log.e("ClasificacionVM", "‚ö†Ô∏è Error al aprender patr√≥n: ${e.message}")
                    e.printStackTrace()
                    // No fallar la clasificaci√≥n si el aprendizaje falla
                }
                
                // Recargar la lista de transacciones pendientes
                android.util.Log.d("ClasificacionVM", "üîÑ Recargando lista de transacciones...")
                cargarTransaccionesPendientes()
                android.util.Log.d("ClasificacionVM", "‚úÖ Clasificaci√≥n completada exitosamente")
            } catch (e: Exception) {
                android.util.Log.e("ClasificacionVM", "‚ùå Error al clasificar transacci√≥n: ${e.message}")
                android.util.Log.e("ClasificacionVM", "‚ùå Stack trace: ${e.stackTraceToString()}")
                e.printStackTrace()
                _uiState.value = ClasificacionPendienteUiState.Error(
                    "Error al clasificar transacci√≥n: ${e.message}"
                )
            }
        }
    }

    fun recargarTransacciones() {
        cargarTransaccionesPendientes()
    }
} 